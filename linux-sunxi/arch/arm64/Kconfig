config ARM64
	def_bool y
	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE
	select ARCH_HAS_SG_CHAIN	
	select ARCH_HAS_OPP
	select ARCH_USE_CMPXCHG_LOCKREF
	select ARCH_HAS_OPP
	select ARCH_HAS_TICK_BROADCAST if GENERIC_CLOCKEVENTS_BROADCAST
	select ARCH_SUPPORTS_ATOMIC_RMW
	select ARCH_WANT_OPTIONAL_GPIOLIB
	select ARCH_WANT_COMPAT_IPC_PARSE_VERSION
	select ARCH_WANT_FRAME_POINTERS
	select ARM_AMBA
	select ARM_ARCH_TIMER
	select ARM_GIC
	select ARM_GIC_V3
	select BUILDTIME_EXTABLE_SORT
	select AUDIT_ARCH_COMPAT_GENERIC
	select CLONE_BACKWARDS
	select COMMON_CLK
	select CPU_PM if (SUSPEND || CPU_IDLE)
	select DCACHE_WORD_ACCESS
	select GENERIC_ALLOCATOR
	select GENERIC_CLOCKEVENTS
	select GENERIC_CLOCKEVENTS_BROADCAST if SMP
	select GENERIC_CPU_AUTOPROBE
	select GENERIC_EARLY_IOREMAP
	select GENERIC_IOMAP
	select GENERIC_IRQ_PROBE
	select GENERIC_IRQ_SHOW
	select GENERIC_SMP_IDLE_THREAD
	select GENERIC_STRNCPY_FROM_USER
	select GENERIC_STRNLEN_USER
	select GENERIC_TIME_VSYSCALL
	select HARDIRQS_SW_RESEND
	select HAVE_ARCH_JUMP_LABEL
	select HAVE_ARCH_KGDB
	select HAVE_ARCH_AUDITSYSCALL
	select HAVE_ARCH_SECCOMP_FILTER
	select HAVE_ARCH_TRACEHOOK
	select HAVE_C_RECORDMCOUNT
	select HAVE_CC_STACKPROTECTOR
	select HAVE_DEBUG_BUGVERBOSE
	select HAVE_DEBUG_KMEMLEAK
	select HAVE_DMA_API_DEBUG
	select HAVE_DMA_ATTRS
	select HAVE_DMA_CONTIGUOUS
	select HAVE_DYNAMIC_FTRACE
	select HAVE_EFFICIENT_UNALIGNED_ACCESS
	select HAVE_FTRACE_MCOUNT_RECORD
	select HAVE_FUNCTION_TRACER
	select HAVE_FUNCTION_GRAPH_TRACER
	select HAVE_GENERIC_DMA_COHERENT
	select HAVE_GENERIC_HARDIRQS
	select HAVE_HW_BREAKPOINT if PERF_EVENTS
	select HAVE_MEMBLOCK
	select HAVE_PATA_PLATFORM
	select HAVE_PERF_EVENTS
	select HAVE_PERF_REGS
	select HAVE_PERF_USER_STACK_DUMP
	select HAVE_SYSCALL_TRACEPOINTS
	select IRQ_DOMAIN
	select MODULES_USE_ELF_RELA
	select NO_BOOTMEM
	select OF
	select OF_EARLY_FLATTREE
	select OF_RESERVED_MEM
	select PERF_USE_VMALLOC
	select POWER_RESET
	select POWER_SUPPLY
	select RTC_LIB
	select SPARSE_IRQ
	select SYSCTL_EXCEPTION_TRACE
	select CLOCKSOURCE_VALIDATE_LAST_CYCLE
	help
	  ARM 64-bit (AArch64) Linux support.

config 64BIT
	def_bool y

config ARCH_PHYS_ADDR_T_64BIT
	def_bool y

config MMU
	def_bool y

config NO_IOPORT
	def_bool y

config STACKTRACE_SUPPORT
	def_bool y

config LOCKDEP_SUPPORT
	def_bool y

config TRACE_IRQFLAGS_SUPPORT
	def_bool y

config RWSEM_XCHGADD_ALGORITHM
	def_bool y

config GENERIC_HWEIGHT
	def_bool y

config GENERIC_CSUM
        def_bool y

config GENERIC_CALIBRATE_DELAY
	def_bool y

config ZONE_DMA
	def_bool y

config ARCH_DMA_ADDR_T_64BIT
	def_bool y

config NEED_DMA_MAP_STATE
	def_bool y

config NEED_SG_DMA_LENGTH
	def_bool y

config SWIOTLB
	def_bool y

config IOMMU_HELPER
	def_bool SWIOTLB

config FIX_EARLYCON_MEM
	def_bool y

config KERNEL_MODE_NEON
	def_bool y

source "init/Kconfig"

source "kernel/Kconfig.freezer"

menu "Platform selection"

config ARCH_VEXPRESS
	bool "ARMv8 software model (Versatile Express)"
	select ARCH_REQUIRE_GPIOLIB
	select COMMON_CLK_VERSATILE
	select POWER_RESET_VEXPRESS
	select VEXPRESS_CONFIG
	help
	  This enables support for the ARMv8 software model (Versatile
	  Express).

config ARCH_XGENE
	bool "AppliedMicro X-Gene SOC Family"
	help
	  This enables support for AppliedMicro X-Gene SOC Family

config ARCH_SUNXI
	bool "Allwinner SoC Family"
	select PINCTRL
	select SUNXI_TIMER
	help
	  This enables support for Allwinner SUNXI SoC family

if ARCH_SUNXI

choice
	prompt "Select the architecture of SoC"
	default ARCH_SUN50I
	help
	  Select the architecture for SoC
	  sunxi
	  `-- sun50i ----- Cortex-A53 based Family SoCs

	config ARCH_SUN50I
	bool "Allwinner SUN50I"
endchoice

# Select the wafer with sun50i

if ARCH_SUN50I
choice
	prompt "Select the wafer with arch sun50i"
	default ARCH_SUN50IW1
	help
	  Select the wafer with arch sun50i

config ARCH_SUN50IW1
	bool "Allwinner SUN50IW1 SoCs"
	help
	  Support for Allwinner SUN50IW1 SoC family

config ARCH_SUN50IW2
	bool "Allwinner SUN50IW2 SoCs"
	help
	  Support for Allwinner SUN50IW2 SoC family

config ARCH_SUN50IW3
	bool "Allwinner SUN50IW3 SoCs"
	help
	  Support for Allwinner SUN50IW3 SoC family

config ARCH_SUN50IW6
	bool "Allwinner SUN50IW6 SoCs"
	help
	  Support for Allwinner SUN50IW6 SoC family
endchoice
endif

# Select the SoC with specific arch and wafer

if ARCH_SUN50IW1
choice
	prompt "Select the SoC with wafer ARCH_SUN50IW1"
	default ARCH_SUN50IW1P1
	help
	  Select the SoC with wafer ARCH_SUN50IW1

config ARCH_SUN50IW1P1
	bool "Allwinner SUN50IW1P1"
	select HAVE_UNSTABLE_SCHED_CLOCK
	select SUNXI_SMC
endchoice
endif

if ARCH_SUN50IW2
choice
	prompt "Select the SoC with wafer ARCH_SUN50IW2"
	default ARCH_SUN50IW2P1
	help
	  Select the SoC with wafer ARCH_SUN50IW2

config ARCH_SUN50IW2P1
	bool "Allwinner SUN50IW2P1"
	select HAVE_UNSTABLE_SCHED_CLOCK
	select SUNXI_SMC
endchoice
endif

if ARCH_SUN50IW3
choice
	prompt "Select the SoC with wafer ARCH_SUN50IW3"
	default ARCH_SUN50IW3P1
	help
	  Select the SoC with wafer ARCH_SUN50IW3

config ARCH_SUN50IW3P1
	bool "Allwinner SUN50IW3P1"
	select HAVE_UNSTABLE_SCHED_CLOCK
	select SUNXI_SMC
endchoice
endif

if ARCH_SUN50IW6
choice
	prompt "Select the SoC with wafer ARCH_SUN50IW6"
	default ARCH_SUN50IW6P1
	help
	  Select the SoC with wafer ARCH_SUN50IW6

config ARCH_SUN50IW6P1
	bool "Allwinner SUN50IW6P1"
	select HAVE_UNSTABLE_SCHED_CLOCK
	select SUNXI_SMC
endchoice
endif

# Select the board between FPGA and EVB

choice
	prompt "Allwinner development boards"
	depends on ARCH_SUNXI
	default FPGA_V4_PLATFORM

config FPGA_V4_PLATFORM
	bool "FPGAv4 board"
	help
	  Support for Allwinner's FPGAv4 board

	config FPGA_V7_PLATFORM
	bool "FPGAv7 board"
	help
	  Support for Allwinner's FPGAv7 board

	config EVB_PLATFORM
	bool "EVB board"
	help
	  Support for Allwinner's EVB board
endchoice

config SUNXI_SOC_NAME
	string "The name of SUNXI SoC"
	default ""
	help
	  Used for /sysfs/.../sysinfo.

endif # end of ARCH_SUNXI
endmenu

menu "Bus support"

config ARM_AMBA
	bool

endmenu

menu "Kernel Features"

menu "ARM errata workarounds"

config ARM64_ERRATUM_845719
	bool "Cortex-A53: 845719: a load might read incorrect data"
	depends on COMPAT
	default n
	help
	  This option adds an alternative code sequence to work around ARM
	  erratum 845719 on Cortex-A53 parts up to r0p4.

	  When running a compat (AArch32) userspace on an affected Cortex-A53
	  part, a load at EL0 from a virtual address that matches the bottom 32
	  bits of the virtual address used by a recent load at (AArch64) EL1
	  might return incorrect data.

	  The workaround is to write the contextidr_el1 register on exception
	  return to a 32-bit task.
	  Please note that this does not necessarily enable the workaround,
	  as it depends on the alternative framework, which will only patch
	  the kernel if an affected CPU is detected.

	  If unsure, say Y.

endmenu


config ARM64_64K_PAGES
	bool "Enable 64KB pages support"
	help
	  This feature enables 64KB pages support (4KB by default)
	  allowing only two levels of page tables and faster TLB
	  look-up. AArch32 emulation is not available when this feature
	  is enabled.

config CPU_BIG_ENDIAN
       bool "Build big-endian kernel"
       help
         Say Y if you plan on running a kernel in big-endian mode.

config SMP
	bool "Symmetric Multi-Processing"
	select USE_GENERIC_SMP_HELPERS
	help
	  This enables support for systems with more than one CPU.  If
	  you say N here, the kernel will run on single and
	  multiprocessor machines, but will use only one CPU of a
	  multiprocessor machine. If you say Y here, the kernel will run
	  on many, but not all, single processor machines. On a single
	  processor machine, the kernel will run faster if you say N
	  here.

	  If you don't know what to do here, say N.

config SCHED_MC
	bool "Multi-core scheduler support"
	depends on SMP
	help
	  Multi-core scheduler support improves the CPU scheduler's decision
	  making when dealing with multi-core CPU chips at a cost of slightly
	  increased overhead in some places. If unsure say N here.

config CPU_OPS_SUNXI
	bool "Use SUNXI cpu ops instead of psci"
	depends on SMP && ARCH_SUN50I
	help
	  Use sunxi cpu ops for SMP. If use psci say N here.

config SCHED_SMT
	bool "SMT scheduler support"
	depends on SMP
	help
	  Improves the CPU scheduler's decision making when dealing with
	  MultiThreading at a cost of slightly increased overhead in some
	  places. If unsure say N here.

config DISABLE_CPU_SCHED_DOMAIN_BALANCE
	bool "(EXPERIMENTAL) Disable CPU level scheduler load-balancing"
	help
	  Disables scheduler load-balancing at CPU sched domain level.

config SCHED_HMP
	bool "(EXPERIMENTAL) Heterogenous multiprocessor scheduling"
	depends on DISABLE_CPU_SCHED_DOMAIN_BALANCE && SCHED_MC && FAIR_GROUP_SCHED && !SCHED_AUTOGROUP
	help
	  Experimental scheduler optimizations for heterogeneous platforms.
	  Attempts to introspectively select task affinity to optimize power
	  and performance. Basic support for multiple (>2) cpu types is in place,
	  but it has only been tested with two types of cpus.
	  There is currently no support for migration of task groups, hence
	  !SCHED_AUTOGROUP. Furthermore, normal load-balancing must be disabled
	  between cpus of different type (DISABLE_CPU_SCHED_DOMAIN_BALANCE).

config SCHED_HMP_PRIO_FILTER
	bool "(EXPERIMENTAL) Filter HMP migrations by task priority"
	depends on SCHED_HMP
	help
	  Enables task priority based HMP migration filter. Any task with
	  a NICE value above the threshold will always be on low-power cpus
	  with less compute capacity.

config SCHED_HMP_PRIO_FILTER_VAL
	int "NICE priority threshold"
	default 5
	depends on SCHED_HMP_PRIO_FILTER

config HMP_FAST_CPU_MASK
	string "HMP scheduler fast CPU mask"
	depends on SCHED_HMP
	help
          Leave empty to use device tree information.
	  Specify the cpuids of the fast CPUs in the system as a list string,
	  e.g. cpuid 0+1 should be specified as 0-1.

config HMP_SLOW_CPU_MASK
	string "HMP scheduler slow CPU mask"
	depends on SCHED_HMP
	help
	  Leave empty to use device tree information.
	  Specify the cpuids of the slow CPUs in the system as a list string,
	  e.g. cpuid 0+1 should be specified as 0-1.

config HMP_VARIABLE_SCALE
	bool "Allows changing the load tracking scale through sysfs"
	depends on SCHED_HMP
	help
	  When turned on, this option exports the thresholds and load average
	  period value for the load tracking patches through sysfs.
	  The values can be modified to change the rate of load accumulation
	  and the thresholds used for HMP migration.
	  The load_avg_period_ms is the time in ms to reach a load average of
	  0.5 for an idle task of 0 load average ratio that start a busy loop.
	  The up_threshold and down_threshold is the value to go to a faster
	  CPU or to go back to a slower cpu.
	  The {up,down}_threshold are devided by 1024 before being compared
	  to the load average.
	  For examples, with load_avg_period_ms = 128 and up_threshold = 512,
	  a running task with a load of 0 will be migrated to a bigger CPU after
	  128ms, because after 128ms its load_avg_ratio is 0.5 and the real
	  up_threshold is 0.5.
	  This patch has the same behavior as changing the Y of the load
	  average computation to
	        (1002/1024)^(LOAD_AVG_PERIOD/load_avg_period_ms)
	  but it remove intermadiate overflows in computation.

config HMP_FREQUENCY_INVARIANT_SCALE
	bool "(EXPERIMENTAL) Frequency-Invariant Tracked Load for HMP"
	depends on HMP_VARIABLE_SCALE && CPU_FREQ
	help
	  Scales the current load contribution in line with the frequency
	  of the CPU that the task was executed on.
	  In this version, we use a simple linear scale derived from the
	  maximum frequency reported by CPUFreq.
	  Restricting tracked load to be scaled by the CPU's frequency
	  represents the consumption of possible compute capacity
	  (rather than consumption of actual instantaneous capacity as
	  normal) and allows the HMP migration's simple threshold
	  migration strategy to interact more predictably with CPUFreq's
	  asynchronous compute capacity changes.

config SCHED_HMP_LITTLE_PACKING
	bool "Small task packing for HMP"
	depends on SCHED_HMP
	default n
	help
	  Allows the HMP Scheduler to pack small tasks into CPUs in the
	  smallest HMP domain.
	  Controlled by two sysfs files in sys/kernel/hmp.
	  packing_enable: 1 to enable, 0 to disable packing. Default 1.
	  packing_limit: runqueue load ratio where a RQ is considered
	    to be full. Default is NICE_0_LOAD * 9/8.

config NR_CPUS
	int "Maximum number of CPUs (2-32)"
	range 2 32
	depends on SMP
	# These have to remain sorted largest to smallest
	default "8"

config HOTPLUG_CPU
	bool "Support for hot-pluggable CPUs"
	depends on SMP
	help
	  Say Y here to experiment with turning CPUs off and on.  CPUs
	  can be controlled through /sys/devices/system/cpu.

config SWP_EMULATE
	bool "Emulate SWP/SWPB instructions"
	help
	  ARMv6 architecture deprecates use of the SWP/SWPB instructions. ARMv8
	  oblosetes the use of SWP/SWPB instructions. ARMv7 multiprocessing
	  extensions introduce the ability to disable these instructions,
	  triggering an undefined instruction exception when executed. Say Y
	  here to enable software emulation of these instructions for userspace
	  (not kernel) using LDREX/STREX. Also creates /proc/cpu/swp_emulation
	  for statistics.

	  In some older versions of glibc [<=2.8] SWP is used during futex
	  trylock() operations with the assumption that the code will not
	  be preempted. This invalid assumption may be more likely to fail
	  with SWP emulation enabled, leading to deadlock of the user
	  application.

	  NOTE: when accessing uncached shared regions, LDREX/STREX rely
	  on an external transaction monitoring block called a global
	  monitor to maintain update atomicity. If your system does not
	  implement a global monitor, this option can cause programs that
	  perform SWP operations to uncached memory to deadlock.

	  If unsure, say Y.

source kernel/Kconfig.preempt

config HZ
	int
	default 100

config ARCH_HAS_HOLES_MEMORYMODEL
	def_bool y if SPARSEMEM

config ARCH_SPARSEMEM_ENABLE
	def_bool y
	select SPARSEMEM_VMEMMAP_ENABLE

config ARCH_SPARSEMEM_DEFAULT
	def_bool ARCH_SPARSEMEM_ENABLE

config ARCH_SELECT_MEMORY_MODEL
	def_bool ARCH_SPARSEMEM_ENABLE

config HAVE_ARCH_PFN_VALID
	def_bool ARCH_HAS_HOLES_MEMORYMODEL || !SPARSEMEM

config HW_PERF_EVENTS
	bool "Enable hardware performance counter support for perf events"
	depends on PERF_EVENTS
	default y
	help
	  Enable hardware performance counter support for perf events. If
	  disabled, perf events will use software events only.

config SYS_SUPPORTS_HUGETLBFS
	def_bool y

config ARCH_WANT_GENERAL_HUGETLB
	def_bool y

config ARCH_WANT_HUGE_PMD_SHARE
	def_bool y if !ARM64_64K_PAGES

config HAVE_ARCH_TRANSPARENT_HUGEPAGE
	def_bool y

config ARMV7_COMPAT
	bool "Kernel support for ARMv7 applications"
	depends on COMPAT
	select SWP_EMULATE
	help
	 This option enables features that allow that ran on an ARMv7 or older
	 processor to continue functioning.

	 If you want to execute ARMv7 applications, say Y

config ARMV7_COMPAT_CPUINFO
	bool "Report backwards compatible cpu features in /proc/cpuinfo"
	depends on ARMV7_COMPAT
	default y
	help
	 This option makes /proc/cpuinfo list CPU features that an ARMv7 or
	 earlier kernel would report, but are not optional on an ARMv8 or later
	 processor.

	 If you want to execute ARMv7 applications, say Y

source "mm/Kconfig"

config FORCE_MAX_ZONEORDER
	int
	default "14" if (ARM64_64K_PAGES && TRANSPARENT_HUGEPAGE)
	default "11"

config SECCOMP
	bool "Enable seccomp to safely compute untrusted bytecode"
	---help---
	  This kernel feature is useful for number crunching applications
	  that may need to compute untrusted bytecode during their
	  execution. By using pipes or other transports made available to
	  the process as file descriptors supporting the read/write
	  syscalls, it's possible to isolate those applications in
	  their own address space using seccomp. Once seccomp is
	  enabled via prctl(PR_SET_SECCOMP), it cannot be disabled
	  and the task is only allowed to execute a few safe syscalls
	  defined by each seccomp mode.

config CC_STACKPROTECTOR
	bool "Enable -fstack-protector buffer overflow detection (EXPERIMENTAL)"
	help
	  This option turns on the -fstack-protector GCC feature. This
	  feature puts, at the beginning of functions, a canary value on
	  the stack just before the return address, and validates
	  the value just before actually returning.  Stack based buffer
	  overflows (that need to overwrite this return address) now also
	  overwrite the canary, which gets detected and the attack is then
	  neutralized via a kernel panic.
	  This feature requires gcc version 4.2 or above.
endmenu

menu "Boot options"

config CMDLINE
	string "Default kernel command string"
	default ""
	help
	  Provide a set of default command-line options at build time by
	  entering them here. As a minimum, you should specify the the
	  root device (e.g. root=/dev/nfs).

choice
	prompt "Kernel command line type" if CMDLINE != ""
	default CMDLINE_FROM_BOOTLOADER

config CMDLINE_FROM_BOOTLOADER
	bool "Use bootloader kernel arguments if available"
	help
	  Uses the command-line options passed by the boot loader. If
	  the boot loader doesn't provide any, the default kernel command
	  string provided in CMDLINE will be used.

config CMDLINE_EXTEND
	bool "Extend bootloader kernel arguments"
	help
	  The command-line arguments provided by the boot loader will be
	  appended to the default kernel command string.

config CMDLINE_FORCE
	bool "Always use the default kernel command string"
	help
	  Always use the default kernel command string, even if the boot
	  loader passes other arguments to the kernel.
	  This is useful if you cannot or don't want to change the
	  command-line options your boot loader passes to the kernel.
endchoice

config BUILD_ARM64_APPENDED_DTB_IMAGE
	bool "Build a concatenated Image.gz/dtb by default"
	depends on OF
	help
	  Enabling this option will cause a concatenated Image.gz and list of
	  DTBs to be built by default (instead of a standalone Image.gz.)
	  The image will built in arch/arm64/boot/Image.gz-dtb

config BUILD_ARM64_APPENDED_DTB_IMAGE_NAMES
	string "Default dtb names"
	depends on BUILD_ARM64_APPENDED_DTB_IMAGE
	help
	  Space separated list of names of dtbs to append when
	  building a concatenated Image.gz-dtb.

config EFI
	bool "UEFI runtime support"
	depends on OF && !CPU_BIG_ENDIAN
	select LIBFDT
	select UCS2_STRING
	select EFI_PARAMS_FROM_FDT
	default y
	help
	  This option provides support for runtime services provided
	  by UEFI firmware (such as non-volatile variables, realtime
          clock, and platform reset). A UEFI stub is also provided to
	  allow the kernel to be booted as an EFI application. This
	  is only useful on systems that have UEFI firmware.

endmenu

menu "Userspace binary formats"

source "fs/Kconfig.binfmt"

config COMPAT
	bool "Kernel support for 32-bit EL0"
	depends on !ARM64_64K_PAGES
	select COMPAT_BINFMT_ELF
	select HAVE_UID16
	select OLD_SIGSUSPEND3
	select COMPAT_OLD_SIGACTION
	help
	  This option enables support for a 32-bit EL0 running under a 64-bit
	  kernel at EL1. AArch32-specific components such as system calls,
	  the user helper functions, VFP support and the ptrace interface are
	  handled appropriately by the kernel.

	  If you want to execute 32-bit userspace applications, say Y.

config SYSVIPC_COMPAT
	def_bool y
	depends on COMPAT && SYSVIPC

endmenu

menu "Power management options"

source "kernel/power/Kconfig"

source "drivers/cpufreq/Kconfig"
config ARCH_SUSPEND_POSSIBLE
	def_bool y

config ARM64_CPU_SUSPEND
	def_bool PM_SLEEP

endmenu

menu "CPU Power Management"

source "drivers/cpuidle/Kconfig"

endmenu

source "net/Kconfig"

source "drivers/Kconfig"

source "drivers/firmware/Kconfig"

source "fs/Kconfig"

source "arch/arm64/kvm/Kconfig"

source "arch/arm64/Kconfig.debug"

source "security/Kconfig"

source "crypto/Kconfig"
if CRYPTO
source "arch/arm64/crypto/Kconfig"
endif

source "lib/Kconfig"
